{"remainingRequest":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/Charts/TagCloud.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/Charts/TagCloud.vue","mtime":1605568762397},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHJlZ2lzdGVyU2hhcGUgfSBmcm9tICd2aXNlci12dWUnCmltcG9ydCBEYXRhU2V0IGZyb20gJ0BhbnR2L2RhdGEtc2V0JwovLyBjb25zdCBEYXRhU2V0ID0gcmVxdWlyZSgnQGFudHYvZGF0YS1zZXQnKQoKY29uc3QgaW1nVXJsID0gJ2h0dHBzOi8vZ3cuYWxpcGF5b2JqZWN0cy5jb20vem9zL3Jtc3BvcnRhbC9nV3llR0xDZEZGUmF2QkdJRHpXay5wbmcnCgpjb25zdCBzY2FsZSA9IFsKICB7IGRhdGFLZXk6ICd4JywgbmljZTogZmFsc2UgfSwKICB7IGRhdGFLZXk6ICd5JywgbmljZTogZmFsc2UgfQpdCgpyZWdpc3RlclNoYXBlKCdwb2ludCcsICdjbG91ZCcsIHsKICBkcmF3IChjZmcsIGNvbnRhaW5lcikgewogICAgcmV0dXJuIGNvbnRhaW5lci5hZGRTaGFwZSgndGV4dCcsIHsKICAgICAgYXR0cnM6IHsKICAgICAgICBmaWxsT3BhY2l0eTogY2ZnLm9wYWNpdHksCiAgICAgICAgZm9udFNpemU6IGNmZy5vcmlnaW4uX29yaWdpbi5zaXplLAogICAgICAgIHJvdGF0ZTogY2ZnLm9yaWdpbi5fb3JpZ2luLnJvdGF0ZSwKICAgICAgICB0ZXh0OiBjZmcub3JpZ2luLl9vcmlnaW4udGV4dCwKICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLAogICAgICAgIGZvbnRGYW1pbHk6IGNmZy5vcmlnaW4uX29yaWdpbi5mb250LAogICAgICAgIGZpbGw6IGNmZy5jb2xvciwKICAgICAgICB0ZXh0QmFzZWxpbmU6ICdBbHBoYWJldGljJywKICAgICAgICAuLi5jZmcuc3R5bGUsCiAgICAgICAgeDogY2ZnLngsCiAgICAgICAgeTogY2ZnLnkKICAgICAgfQogICAgfSkKICB9Cn0pCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1RhZ0Nsb3VkJywKICBwcm9wczogewogICAgdGFnTGlzdDogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBoZWlnaHQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiA0MDAKICAgIH0sCiAgICB3aWR0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDY0MAogICAgfQogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBkYXRhOiBbXSwKICAgICAgc2NhbGUKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICB0YWdMaXN0OiBmdW5jdGlvbiAodmFsKSB7CiAgICAgIGlmICh2YWwubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuaW5pdFRhZ0Nsb3VkKHZhbCkKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICBpZiAodGhpcy50YWdMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgdGhpcy5pbml0VGFnQ2xvdWQodGhpcy50YWdMaXN0KQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgaW5pdFRhZ0Nsb3VkIChkYXRhU291cmNlKSB7CiAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gdGhpcwoKICAgICAgY29uc3QgZHYgPSBuZXcgRGF0YVNldC5WaWV3KCkuc291cmNlKGRhdGFTb3VyY2UpCiAgICAgIGNvbnN0IHJhbmdlID0gZHYucmFuZ2UoJ3ZhbHVlJykKICAgICAgY29uc3QgbWluID0gcmFuZ2VbMF0KICAgICAgY29uc3QgbWF4ID0gcmFuZ2VbMV0KICAgICAgY29uc3QgaW1hZ2VNYXNrID0gbmV3IEltYWdlKCkKICAgICAgaW1hZ2VNYXNrLmNyb3NzT3JpZ2luID0gJycKICAgICAgaW1hZ2VNYXNrLnNyYyA9IGltZ1VybAogICAgICBpbWFnZU1hc2sub25sb2FkID0gKCkgPT4gewogICAgICAgIGR2LnRyYW5zZm9ybSh7CiAgICAgICAgICB0eXBlOiAndGFnLWNsb3VkJywKICAgICAgICAgIGZpZWxkczogWyduYW1lJywgJ3ZhbHVlJ10sCiAgICAgICAgICBzaXplOiBbd2lkdGgsIGhlaWdodF0sCiAgICAgICAgICBpbWFnZU1hc2ssCiAgICAgICAgICBmb250OiAnVmVyZGFuYScsCiAgICAgICAgICBwYWRkaW5nOiAwLAogICAgICAgICAgdGltZUludGVydmFsOiA1MDAwLCAvLyBtYXggZXhlY3V0ZSB0aW1lCiAgICAgICAgICByb3RhdGUgKCkgewogICAgICAgICAgICBsZXQgcmFuZG9tID0gfn4oTWF0aC5yYW5kb20oKSAqIDQpICUgNAogICAgICAgICAgICBpZiAocmFuZG9tID09PSAyKSB7CiAgICAgICAgICAgICAgcmFuZG9tID0gMAogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByYW5kb20gKiA5MCAvLyAwLCA5MCwgMjcwCiAgICAgICAgICB9LAogICAgICAgICAgZm9udFNpemUgKGQpIHsKICAgICAgICAgICAgaWYgKGQudmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gKChkLnZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSAqICgzMiAtIDgpICsgOAogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICB0aGlzLmRhdGEgPSBkdi5yb3dzCiAgICAgIH0KICAgIH0KICB9Cn0K"},{"version":3,"sources":["TagCloud.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TagCloud.vue","sourceRoot":"src/components/Charts","sourcesContent":["<template>\n  <v-chart :width=\"width\" :height=\"height\" :padding=\"[0]\" :data=\"data\" :scale=\"scale\">\n    <v-tooltip :show-title=\"false\" />\n    <v-coord type=\"rect\" direction=\"TL\" />\n    <v-point position=\"x*y\" color=\"category\" shape=\"cloud\" tooltip=\"value*category\" />\n  </v-chart>\n</template>\n\n<script>\nimport { registerShape } from 'viser-vue'\nimport DataSet from '@antv/data-set'\n// const DataSet = require('@antv/data-set')\n\nconst imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png'\n\nconst scale = [\n  { dataKey: 'x', nice: false },\n  { dataKey: 'y', nice: false }\n]\n\nregisterShape('point', 'cloud', {\n  draw (cfg, container) {\n    return container.addShape('text', {\n      attrs: {\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n        ...cfg.style,\n        x: cfg.x,\n        y: cfg.y\n      }\n    })\n  }\n})\n\nexport default {\n  name: 'TagCloud',\n  props: {\n    tagList: {\n      type: Array,\n      required: true\n    },\n    height: {\n      type: Number,\n      default: 400\n    },\n    width: {\n      type: Number,\n      default: 640\n    }\n  },\n  data () {\n    return {\n      data: [],\n      scale\n    }\n  },\n  watch: {\n    tagList: function (val) {\n      if (val.length > 0) {\n        this.initTagCloud(val)\n      }\n    }\n  },\n  mounted () {\n    if (this.tagList.length > 0) {\n      this.initTagCloud(this.tagList)\n    }\n  },\n  methods: {\n    initTagCloud (dataSource) {\n      const { height, width } = this\n\n      const dv = new DataSet.View().source(dataSource)\n      const range = dv.range('value')\n      const min = range[0]\n      const max = range[1]\n      const imageMask = new Image()\n      imageMask.crossOrigin = ''\n      imageMask.src = imgUrl\n      imageMask.onload = () => {\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          size: [width, height],\n          imageMask,\n          font: 'Verdana',\n          padding: 0,\n          timeInterval: 5000, // max execute time\n          rotate () {\n            let random = ~~(Math.random() * 4) % 4\n            if (random === 2) {\n              random = 0\n            }\n            return random * 90 // 0, 90, 270\n          },\n          fontSize (d) {\n            if (d.value) {\n              return ((d.value - min) / (max - min)) * (32 - 8) + 8\n            }\n            return 0\n          }\n        })\n        this.data = dv.rows\n      }\n    }\n  }\n}\n</script>\n"]}]}