{"remainingRequest":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/Ellipsis/Ellipsis.vue","mtime":1605568762401},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdhbnQtZGVzaWduLXZ1ZScKaW1wb3J0IHsgY3V0U3RyQnlGdWxsTGVuZ3RoLCBnZXRTdHJGdWxsTGVuZ3RoIH0gZnJvbSAnQC9jb21wb25lbnRzL191dGlsL3V0aWwnCi8qCiAgICBjb25zdCBpc1N1cHBvcnRMaW5lQ2xhbXAgPSBkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdExpbmVDbGFtcCAhPT0gdW5kZWZpbmVkOwoKICAgIGNvbnN0IFRvb2x0aXBPdmVybGF5U3R5bGUgPSB7CiAgICAgIG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnLAogICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnLAogICAgfTsKICAqLwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdFbGxpcHNpcycsCiAgY29tcG9uZW50czogewogICAgVG9vbHRpcAogIH0sCiAgcHJvcHM6IHsKICAgIHByZWZpeENsczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdhbnQtcHJvLWVsbGlwc2lzJwogICAgfSwKICAgIHRvb2x0aXA6IHsKICAgICAgdHlwZTogQm9vbGVhbgogICAgfSwKICAgIGxlbmd0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgbGluZXM6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9LAogICAgZnVsbFdpZHRoUmVjb2duaXRpb246IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGdldFN0ckRvbSAoc3RyLCBmdWxsTGVuZ3RoKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgPHNwYW4+eyBjdXRTdHJCeUZ1bGxMZW5ndGgoc3RyLCB0aGlzLmxlbmd0aCkgKyAoZnVsbExlbmd0aCA+IHRoaXMubGVuZ3RoID8gJy4uLicgOiAnJykgfTwvc3Bhbj4KICAgICAgKQogICAgfSwKICAgIGdldFRvb2x0aXAgKGZ1bGxTdHIsIGZ1bGxMZW5ndGgpIHsKICAgICAgcmV0dXJuICgKICAgICAgICA8VG9vbHRpcD4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PSJ0aXRsZSI+eyBmdWxsU3RyIH08L3RlbXBsYXRlPgogICAgICAgICAgeyB0aGlzLmdldFN0ckRvbShmdWxsU3RyLCBmdWxsTGVuZ3RoKSB9CiAgICAgICAgPC9Ub29sdGlwPgogICAgICApCiAgICB9CiAgfSwKICByZW5kZXIgKCkgewogICAgY29uc3QgeyB0b29sdGlwLCBsZW5ndGggfSA9IHRoaXMuJHByb3BzCiAgICBjb25zdCBzdHIgPSB0aGlzLiRzbG90cy5kZWZhdWx0Lm1hcCh2Tm9kZSA9PiB2Tm9kZS50ZXh0KS5qb2luKCcnKQogICAgY29uc3QgZnVsbExlbmd0aCA9IGdldFN0ckZ1bGxMZW5ndGgoc3RyKQogICAgY29uc3Qgc3RyRG9tID0gdG9vbHRpcCAmJiBmdWxsTGVuZ3RoID4gbGVuZ3RoID8gdGhpcy5nZXRUb29sdGlwKHN0ciwgZnVsbExlbmd0aCkgOiB0aGlzLmdldFN0ckRvbShzdHIsIGZ1bGxMZW5ndGgpCiAgICByZXR1cm4gKAogICAgICBzdHJEb20KICAgICkKICB9Cn0K"},{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Ellipsis.vue","sourceRoot":"src/components/Ellipsis","sourcesContent":["<script>\nimport { Tooltip } from 'ant-design-vue'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"]}]}