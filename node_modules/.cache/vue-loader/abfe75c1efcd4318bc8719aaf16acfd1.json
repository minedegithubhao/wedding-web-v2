{"remainingRequest":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/pts/Scroll/VenusScroll.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/src/components/pts/Scroll/VenusScroll.vue","mtime":1605568762424},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cxdpc/WorkSpaces/idea_workspace/wedding-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnZlbnVzLXNjcm9sbCB7CiAgLl9fdmlldyB7CiAgICBtaW4taGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7CiAgfQp9Cg=="},{"version":3,"sources":["VenusScroll.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;AACA;AACA;AACA","file":"VenusScroll.vue","sourceRoot":"src/components/pts/Scroll","sourcesContent":["<template>\n  <vuescroll :ops=\"ops\"\n             class=\"venus-scroll\"\n             ref=\"vs\"\n             @handle-scroll=\"handleScroll\"\n             @handle-resize=\"handleResize\">\n    <slot></slot>\n  </vuescroll>\n</template>\n<script>\nimport vuescroll from 'vuescroll'\nimport { mixinDevice, mixin } from '@/utils/mixin'\n\nexport default {\n  name: 'VenusScroll',\n  props: {\n    enable: {\n      type: Boolean,\n      default: false\n    },\n    onlyShowBarOnScroll: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: '4px'\n    },\n    gutterOfSide: {\n      type: String,\n      default: '2px'\n    },\n    sizeStrategy: {\n      type: [Number, String],\n      default: '100%'\n    },\n    initialScrollY: {\n      type: [Number, String, Boolean],\n      default: false\n    },\n    initialScrollX: {\n      type: [Number, String, Boolean],\n      default: false\n    },\n    // 是否启用横向滚动条，设置为true时，确保父级元素宽度是否固定\n    scrollingX: {\n      type: Boolean,\n      default: false\n    },\n    scrollingY: {\n      type: Boolean,\n      default: true\n    },\n    disable: {\n      type: Boolean,\n      default: false\n    },\n    detectResize: {\n      type: Boolean,\n      default: false\n    },\n    gutterOfEnds: {\n      type: String,\n      default: '0px'\n    },\n    background: {\n      type: String,\n      default: '#556EE6'\n    },\n    barOpacity: {\n      type: Number,\n      default: 0.52\n    },\n    keepShow: {\n      type: Boolean,\n      default: false\n    },\n    maxHeight: {\n      type: Number,\n      default: undefined\n    },\n    mode: {\n      type: String,\n      default: undefined\n    },\n    isMonitorScroll: {\n      type: Boolean,\n      default: false\n    },\n    openScrollEvent: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mixins: [mixinDevice, mixin],\n  components: {\n    vuescroll\n  },\n  watch: {\n    detectResize(val) {\n      this.ops.vuescroll.detectResize = val\n    },\n    mode(val) {\n      this.ops.vuescroll.mode = val\n    }\n  },\n  data() {\n    const ops = {\n      vuescroll: {\n        mode: this.mode || 'native',\n        sizeStrategy: this.sizeStrategy,\n        detectResize: this.detectResize,\n        wheelScrollDuration: 400\n      },\n      scrollPanel: {\n        initialScrollY: this.initialScrollY,\n        initialScrollX: this.initialScrollX,\n        scrollingX: this.scrollingX,\n        scrollingY: this.scrollingY,\n        maxHeight: this.maxHeight,\n        speed: 300\n      },\n      rail: {\n        gutterOfEnds: this.gutterOfEnds,\n        gutterOfSide: this.gutterOfSide,\n        size: this.size\n      },\n      bar: {\n        disable: false,\n        background: this.background,\n        keepShow: this.keepShow,\n        size: this.size,\n        opacity: this.barOpacity,\n        minSize: 0.2,\n        onlyShowBarOnScroll: this.onlyShowBarOnScroll\n      },\n      scrollButton: {\n        enable: this.enable,\n        background: this.background,\n        opacity: 1,\n        step: 30,\n        mousedownStep: 30\n      }\n    }\n    return {\n      ops: ops\n    }\n  },\n  created() {\n    this.ops.bar.background = this.background || this.primaryColor\n    this.ops.scrollButton.background = this.background || this.primaryColor\n    if (this.mode && ['native', 'slide'].indexOf(this.mode) > -1) {\n      this.ops.vuescroll.mode = this.mode\n    } else {\n      this.ops.vuescroll.mode = this.isMobile() ? 'slide' : 'native'\n    }\n    if (this.openScrollEvent) {\n      this.$store.dispatch('BackTop', this.scrollToTop)\n      this.$store.dispatch('BackToView', this.scrollToView)\n    }\n  },\n  methods: {\n    handleScroll(vertical, horizontal, e) {\n      this.$store.dispatch('HandleScroll', { vertical, horizontal, e })\n    },\n    handleResize(vertical, horizontal, nativeEvent) {\n      this.$refs['vs'].scrollTo(\n        {\n          y: nativeEvent.height\n        },\n        500,\n        'easeInQuad'\n      )\n    },\n    scrollToTop() {\n      this.$refs['vs'].scrollTo(\n        {\n          y: 0\n        },\n        500,\n        'easeInQuad'\n      )\n    },\n    scrollToView(elementId) {\n      if (elementId) {\n        this.$refs['vs'].scrollIntoView(elementId, 500)\n      }\n    },\n    scrollToX(height) {\n      this.$refs['vs'].scrollBy(\n        {\n          dx: height\n        },\n        500,\n        'easeInQuad'\n      )\n    },\n    scrollToY(height) {\n      this.$refs['vs'].scrollBy(\n        {\n          dy: height\n        },\n        500,\n        'easeInQuad'\n      )\n    }\n  }\n}\n</script>\n<style lang=\"less\">\n.venus-scroll {\n  .__view {\n    min-height: auto !important;\n  }\n}\n</style>\n"]}]}